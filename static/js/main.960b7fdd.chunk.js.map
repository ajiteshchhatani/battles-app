{"version":3,"sources":["BattlesLocation/index.js","BattlesOtherInfo/index.js","search-icon.svg","clear-icon.svg","battlesAutocomplete/index.js","App.js","reportWebVitals.js","index.js"],"names":["BattlesLocation","props","battles","locationQuery","useState","searchResult","setSearchResult","getList","query","filter","battle","regex","RegExp","location","match","useEffect","battleLocations","toLowerCase","className","length","map","item","name","battle_number","BattlesOtherInfo","otherQuery","otherInfo","setOtherInfo","info","key","attacker_king","defender_king","attacker_1","defender_1","battle_type","attacker_commander","defender_commander","BattlesAutocomplete","setBattlesData","locationQueryProp","setLocationQueryProp","otherQueryProp","setOtherQueryProp","battlesList","src","searchIcon","alt","type","value","onChange","e","target","placeholder","clearIcon","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.960b7fdd.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport '../App.css';\r\n\r\nfunction BattlesLocation(props) {\r\n    const { battles, locationQuery } = props;\r\n    const [searchResult, setSearchResult] = useState([]);\r\n\r\n    /**\r\n     * function to search location inside json based on location prop passed\r\n     * @param {string} query \r\n     */\r\n    function getList(query) {\r\n        const result = battles.filter((battle) => {\r\n            const regex = new RegExp(`^${query}`, 'gi');\r\n            return battle.location.match(regex);\r\n        });\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * useEffect to call getList function to start location search if prop supplied\r\n     */\r\n    useEffect(() => {\r\n        if (locationQuery !== '') {\r\n            const battleLocations = getList(locationQuery.toLowerCase());\r\n            setSearchResult(battleLocations);\r\n        }\r\n    }, [locationQuery, setSearchResult, getList]);\r\n\r\n    return (\r\n        <div className=\"autcomplete-results-container\">\r\n            {\r\n                searchResult.length === 0 ? (\r\n                    <div>No locations found</div>\r\n                )\r\n                    :\r\n                    (\r\n                        <div>\r\n                            <p>Search Results:</p>\r\n                            {\r\n                                searchResult.map((item) => {\r\n                                    return (\r\n                                        <div className=\"search-result-item\" key={item.battle_number}>\r\n                                            <p>Location: {item.location}</p>\r\n                                            <p>Battle Name: {item.name}</p>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                            <p>Total battles fought at {locationQuery}: {searchResult.length}</p>\r\n                        </div>\r\n                    )\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default BattlesLocation","import React, { useEffect, useState } from 'react';\r\n\r\nfunction BattlesOtherInfo(props) {\r\n    const { battles, otherQuery } = props;\r\n    const [otherInfo, setOtherInfo] = useState([]);\r\n\r\n    /**\r\n     * function to search other info like attacker, defender etc inside json based on location prop passed\r\n     * @param {string} query \r\n     */\r\n    function search(query) {\r\n        const result = battles.filter((battle) => {\r\n            const regex = new RegExp(`^${query}`, 'gi');\r\n            for (let key in battle) {\r\n                if (typeof (battle[key]) === 'string' && typeof (query) === 'string') {\r\n                    if (battle[key].toLowerCase().match(regex)) {\r\n                        return battle;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * useEffect to call search function to start other info search if prop supplied\r\n     */\r\n    useEffect(() => {\r\n        if (otherQuery !== '') {\r\n            const info = search(otherQuery);\r\n            setOtherInfo(info);\r\n        }\r\n    }, [otherQuery, setOtherInfo]);\r\n\r\n    return (\r\n        <div className=\"autcomplete-results-container\">\r\n            {\r\n                otherInfo.length === 0 ? (\r\n                    <div>No results found</div>\r\n                )\r\n                    :\r\n                    (\r\n                        <div>\r\n                            <p>Search Results:</p>\r\n                            {\r\n                                otherInfo.map((item) => {\r\n                                    return (\r\n                                        <div className=\"search-result-item\" key={item.battle_number}>\r\n                                            <p>Battle Name: {item.name}</p>\r\n                                            <p>Attacker King: {item.attacker_king}</p>\r\n                                            <p>Defender King: {item.defender_king}</p>\r\n                                            <p>Attacker 1: {item.attacker_1}</p>\r\n                                            <p>Defender 1: {item.defender_1}</p>\r\n                                            <p>Battle Type: {item.battle_type}</p>\r\n                                            <p>Attacker Commander: {item.attacker_commander}</p>\r\n                                            <p>Defender Commander: {item.defender_commander}</p>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    )\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default BattlesOtherInfo","export default __webpack_public_path__ + \"static/media/search-icon.818eb5a3.svg\";","export default __webpack_public_path__ + \"static/media/clear-icon.aa41ca5d.svg\";","import React, { useEffect, useState } from 'react';\r\nimport battlesList from '../api/battles.json';\r\nimport BattlesLocation from '../BattlesLocation';\r\nimport BattlesOtherInfo from '../BattlesOtherInfo';\r\nimport '../App.css';\r\nimport searchIcon from '../search-icon.svg';\r\nimport clearIcon from '../clear-icon.svg';\r\n\r\nfunction BattlesAutocomplete() {\r\n    const [battles, setBattlesData] = useState([]);\r\n    // State to hold prop for location autocomplete\r\n    const [locationQueryProp, setLocationQueryProp] = useState('');\r\n    // State to hold prop for other info autocomplete\r\n    const [otherQueryProp, setOtherQueryProp] = useState('');\r\n\r\n    /**\r\n     * useEffect to run once to get json data\r\n     */\r\n    useEffect(() => {\r\n        setBattlesData(battlesList);\r\n    }, []);\r\n    /**\r\n     * function to track value of location autocomplete\r\n     * @param {event} e \r\n     */\r\n    function onLocationInputChange(e) {\r\n        setLocationSearchQuery(e.target.value);\r\n    }\r\n\r\n    /**\r\n     * function to track value of other info autocomplete\r\n     * @param {event} e \r\n     */\r\n    function onOtherInputChange(e) {\r\n        setOtherSearchQuery(e.target.value)\r\n    }\r\n\r\n    /**\r\n     * function to set prop for location autocomplete component\r\n     * @param {string} query \r\n     */\r\n    function setLocationSearchQuery(query) {\r\n        setLocationQueryProp(query);\r\n    }\r\n\r\n    /**\r\n     * function to set prop for other info autocomplete component\r\n     * @param {string} query \r\n     */\r\n    function setOtherSearchQuery(query) {\r\n        setOtherQueryProp(query);\r\n    }\r\n\r\n    /**\r\n     * function to be called on clear button of location\r\n     */\r\n    function onClearLocationSearchBox() {\r\n        setLocationQueryProp('');\r\n    }\r\n\r\n    /**\r\n     * function to be called on clear button of other info\r\n     */\r\n    function onClearOtherSearchBox() {\r\n        setOtherQueryProp('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"autocomplete-container\">\r\n            <div className=\"location-container\">\r\n                <img src={searchIcon} alt=\"Search Icon\" className=\"search-icon\" />\r\n                <input className=\"location-autocomplete-box\" type=\"text\" value={locationQueryProp} onChange={onLocationInputChange} placeholder=\"Search battles\" />\r\n                {locationQueryProp !== '' && <img src={clearIcon} alt=\"Clear Icon\" className=\"clear-icon\" onClick={onClearLocationSearchBox} />}\r\n                {locationQueryProp !== '' && <BattlesLocation battles={battles} locationQuery={locationQueryProp} />}\r\n            </div>\r\n\r\n            <div className=\"other-container\">\r\n                <img src={searchIcon} alt=\"Search Icon\" className=\"other-search-icon\" />\r\n                <input className=\"other-autocomplete-box\" type=\"text\" value={otherQueryProp} onChange={onOtherInputChange} placeholder=\"Search other info\" />\r\n                {otherQueryProp !== '' && <img src={clearIcon} alt=\"Clear Icon\" className=\"other-clear-icon\" onClick={onClearOtherSearchBox} />}\r\n                {otherQueryProp !== '' && <BattlesOtherInfo battles={battles} otherQuery={otherQueryProp} />}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default BattlesAutocomplete","import BattlesAutocomplete from './battlesAutocomplete';\n\nfunction App() {\n  return (\n    <>\n    <BattlesAutocomplete />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}